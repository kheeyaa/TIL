// 1. 숫자 통일
// 0과 1로 구성된 문자열이 주어지면 현수는 연속된 1이상의 구간을 뒤집어 전체를 하나의 숫자 로 통일하려고 합니다.
// 여기서 뒤집는다는 0을 1로 또는 1을 0으로 바꾸는 것을 의미합니다.
// 만약 문자열이 100001111이 주어지면 현수는 2번째부터 5번째까지는 뒤집어 111111111로 통일할 수 있습니다.
// 문자열이 주어지면 현수가 최소 몇 번만에 숫자을 통일할 수 있는지 찾아주세요.

// ▣ 입력설명
// 매개변수 s에 문자열이 전달됩니다. 문자열의 길이는 100을 넘지 않습니다.
// ▣ 출력설명 최소횟수를 반환합니다.
// ▣ 매개변수 형식 1 100001111
// ▣ 반환값 형식 1 1
// ▣ 매개변수 형식 2 10010111100
// ▣ 반환값 형식 1 3

// SOL)
// 문자열을 앞에서 부터 탐색하면서
// 1의 연속구간, 0의 연속구간 횟수를 센다음 작은 값을 고른다.
// 10111001 => 1은 3개, 0은 2개 => 답: 2
// s[0] === '1' ? 1의 갯수를 세는 변수를 잡아
// 1번 인덱스부터 돈다
// s[i-1] !== s[i]

function solution(s) {
  let one = 0,
    zero = 0;
  s[0] === "1" ? (one = 1) : (zero = 1); // idx = 0
  for (let i = 1; i < s.length; i++) {
    // idx = 1부터 시작!
    if (s[i - 1] !== s[i]) {
      s[i] === "1" ? (one += 1) : (zero += 1);
    }
  }
  // return Math.min(one, zero);
  return one > zero ? zero : one;
}
console.log(solution("100001111"));
console.log(solution("10010111100"));
