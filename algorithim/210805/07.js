// 7. 최대점수 구하기(냅색 알고리즘)
// 이번 정보올림피아드대회에서 좋은 성적을 내기 위하여 현수는 선생님이 주신 N개의 문제를
// 풀려고 합니다. 각 문제는 그것을 풀었을 때 얻는 점수와 푸는데 걸리는 시간이 주어지게 됩
// 니다. 제한시간 M안에 N개의 문제 중 최대점수를 얻을 수 있도록 해야 합니다. (해당문제는
// 해당시간이 걸리면 푸는 걸로 간주한다, 한 유형당 한개만 풀 수 있습니다.)
// ▣ 입력설명
// 매개변수 nums에 N(1<=N<=20)개의 문제 정보인 문제를 풀었을 때의 점수와 푸는데 걸리는
// 시간이 순서쌍으로 주어집니다. 매개변수 m에 제한 시간 M(10<=M<=300)이 주어집니다.
// ▣ 출력설명
// 제한 시간안에 얻을 수 있는 최대 점수를 반환합니다.
// ▣ 매개변수 형식 1
// [[10, 5], [25, 12], [15, 8], [6, 3], [7, 4]], 20
// [점수, 시간], 제한시간
// ▣ 반환값 형식 1
// 41 = 25 + 10 + 6

// 개수가 한개일 때는 앞의 문제처럼 풀면 안된다.
// 중복을 회피하기위해 뒤에서부터 앞으로 간다.
{
  function solution(nums, m) {
    let dy = Array.from({ length: m + 1 }, () => 0);

    for (let x of nums) {
      let time = x[1],
        score = x[0];
      // 중복을 회피하기위해 뒤에서 앞으로 가면됨.
      for (let i = m; i >= time; i--) {
        if (dy[i] < dy[i - time] + score) {
          dy[i] = dy[i - time] + score;
        }
      }
    }
    return dy[m];
  }
  // console.log(
  //   solution(
  //     [
  //       [10, 5],
  //       [25, 12],
  //       [15, 8],
  //       [6, 3],
  //       [7, 4],
  //     ],
  //     20
  //   )
  // ); //41
}
